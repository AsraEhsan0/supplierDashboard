// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SupplierDashboard.Data;

#nullable disable

namespace SupplierDashboard.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SupplierDashboard.Models.Entities.Agency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AgencyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Agencies");

                    b.HasData(
                        new
                        {
                            Id = "ak13jfei",
                            Address = "Manama, Bahrain",
                            AgencyName = "Global Travels",
                            CreatedAt = new DateTime(2025, 9, 10, 21, 37, 2, 991, DateTimeKind.Utc).AddTicks(413),
                            Email = "global@travel.com",
                            IsActive = false,
                            Phone = "1234567890"
                        },
                        new
                        {
                            Id = "13asd4134",
                            Address = "Pakistan, Toba Tek Singh",
                            AgencyName = "Sky Travels",
                            CreatedAt = new DateTime(2025, 9, 10, 21, 37, 2, 991, DateTimeKind.Utc).AddTicks(424),
                            Email = "skytravel123@gmail.com",
                            IsActive = false,
                            Phone = "9078675"
                        },
                        new
                        {
                            Id = "2148ekfja",
                            Address = "Dubai",
                            AgencyName = "Falcon Tours",
                            CreatedAt = new DateTime(2025, 9, 10, 21, 37, 2, 991, DateTimeKind.Utc).AddTicks(427),
                            Email = "falcon@tours.com",
                            IsActive = true,
                            Phone = "48764665"
                        },
                        new
                        {
                            Id = "kafj938ka",
                            Address = "Bahrain Manama",
                            AgencyName = "Emirates Travel",
                            CreatedAt = new DateTime(2025, 9, 10, 21, 37, 2, 991, DateTimeKind.Utc).AddTicks(430),
                            Email = "emirates@travel.com",
                            IsActive = false,
                            Phone = "90274012"
                        },
                        new
                        {
                            Id = "kjf98932",
                            Address = "Manama",
                            AgencyName = "Gulf Wings",
                            CreatedAt = new DateTime(2025, 9, 10, 21, 37, 2, 991, DateTimeKind.Utc).AddTicks(433),
                            Email = "gulf@wings.com",
                            IsActive = false,
                            Phone = "48764665"
                        });
                });

            modelBuilder.Entity("SupplierDashboard.Models.Entities.Agent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AgencyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AgentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("Agents");

                    b.HasData(
                        new
                        {
                            Id = "akdjf;au332",
                            AgencyId = "kjf98932",
                            AgentName = "Yasir Ali",
                            CreatedAt = new DateTime(2025, 9, 10, 21, 37, 2, 991, DateTimeKind.Utc).AddTicks(1062),
                            Email = "yasir294@gmail.com",
                            IsActive = true,
                            Password = "password123",
                            UserName = "yasir294"
                        },
                        new
                        {
                            Id = "qiukdaj233",
                            AgencyId = "kafj938ka",
                            AgentName = "Mubashar Ali",
                            CreatedAt = new DateTime(2025, 9, 10, 21, 37, 2, 991, DateTimeKind.Utc).AddTicks(1067),
                            Email = "mubashar@example.com",
                            IsActive = true,
                            Password = "password123",
                            UserName = "mubashar"
                        },
                        new
                        {
                            Id = "akdjioweiu",
                            AgencyId = "13asd4134",
                            AgentName = "Ali Khan",
                            CreatedAt = new DateTime(2025, 9, 10, 21, 37, 2, 991, DateTimeKind.Utc).AddTicks(1069),
                            Email = "ali@example.com",
                            IsActive = true,
                            Password = "password123",
                            UserName = "alikhan"
                        });
                });

            modelBuilder.Entity("SupplierDashboard.Models.Entities.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlightNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PNR")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PassengerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SeatsSold")
                        .HasColumnType("int");

                    b.Property<string>("Segment")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = "akdjf832",
                            AgentId = "akdjf;au332",
                            BookingDate = new DateTime(2025, 9, 10, 21, 37, 2, 991, DateTimeKind.Utc).AddTicks(1111),
                            FlightNo = "FL001",
                            GroupName = "Group A",
                            PNR = "PNR12345",
                            PassengerName = "Ali Khan",
                            SeatsSold = 25,
                            Segment = "LHE - BAH"
                        },
                        new
                        {
                            Id = "kja;iou29",
                            AgentId = "qiukdaj233",
                            BookingDate = new DateTime(2025, 9, 10, 21, 37, 2, 991, DateTimeKind.Utc).AddTicks(1116),
                            FlightNo = "FL002",
                            GroupName = "Group B",
                            PNR = "PNR67890",
                            PassengerName = "Fatima Zahra",
                            SeatsSold = 18,
                            Segment = "LHE - BAH"
                        },
                        new
                        {
                            Id = "akldja933",
                            AgentId = "akdjf;au332",
                            BookingDate = new DateTime(2025, 9, 10, 21, 37, 2, 991, DateTimeKind.Utc).AddTicks(1119),
                            FlightNo = "FL003",
                            GroupName = "Group C",
                            PNR = "PNR11122",
                            PassengerName = "Omar Faisal",
                            SeatsSold = 30,
                            Segment = "LHE - BAH"
                        });
                });

            modelBuilder.Entity("SupplierDashboard.Models.Entities.Discount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("SupplierDashboard.Models.Entities.DiscountAgency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AgencyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiscountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("DiscountId");

                    b.ToTable("DiscountAgencies");
                });

            modelBuilder.Entity("SupplierDashboard.Models.Entities.Markup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("MarkupFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MarkupType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Markups");
                });

            modelBuilder.Entity("SupplierDashboard.Models.Entities.MarkupAgency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AgencyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MarkupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("MarkupId");

                    b.ToTable("MarkupAgencies");
                });

            modelBuilder.Entity("SupplierDashboard.Models.Entities.SubAgency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AgencyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HandlingConsultant")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("SubAgencies");
                });

            modelBuilder.Entity("SupplierDashboard.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("AccountActive")
                        .HasColumnType("bit");

                    b.Property<string>("AccountingId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AgencyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("AllowBookUnderCancellationPolicy")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowCancellationAfterVoucher")
                        .HasColumnType("bit");

                    b.Property<string>("CompanyPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ConsultantReceiveBookingEmail")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RoleType")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timezone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SupplierDashboard.Models.Entities.VoidService", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("VoidFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VoidType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("VoidServices");
                });

            modelBuilder.Entity("SupplierDashboard.Models.Entities.VoidServiceAgency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AgencyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VoidServiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("VoidServiceId");

                    b.ToTable("VoidServiceAgencies");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SupplierDashboard.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SupplierDashboard.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupplierDashboard.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SupplierDashboard.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SupplierDashboard.Models.Entities.Agent", b =>
                {
                    b.HasOne("SupplierDashboard.Models.Entities.Agency", "Agency")
                        .WithMany("Agents")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("SupplierDashboard.Models.Entities.Booking", b =>
                {
                    b.HasOne("SupplierDashboard.Models.Entities.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("SupplierDashboard.Models.Entities.DiscountAgency", b =>
                {
                    b.HasOne("SupplierDashboard.Models.Entities.Agency", "Agency")
                        .WithMany("DiscountAgencies")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupplierDashboard.Models.Entities.Discount", "Discount")
                        .WithMany("DiscountAgencies")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("SupplierDashboard.Models.Entities.MarkupAgency", b =>
                {
                    b.HasOne("SupplierDashboard.Models.Entities.Agency", "Agency")
                        .WithMany("MarkupAgencies")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupplierDashboard.Models.Entities.Markup", "Markup")
                        .WithMany("MarkupAgencies")
                        .HasForeignKey("MarkupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Markup");
                });

            modelBuilder.Entity("SupplierDashboard.Models.Entities.User", b =>
                {
                    b.HasOne("SupplierDashboard.Models.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("SupplierDashboard.Models.Entities.VoidServiceAgency", b =>
                {
                    b.HasOne("SupplierDashboard.Models.Entities.Agency", "Agency")
                        .WithMany("VoidServiceAgencies")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SupplierDashboard.Models.Entities.VoidService", "VoidService")
                        .WithMany("VoidServiceAgencies")
                        .HasForeignKey("VoidServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("VoidService");
                });

            modelBuilder.Entity("SupplierDashboard.Models.Entities.Agency", b =>
                {
                    b.Navigation("Agents");

                    b.Navigation("DiscountAgencies");

                    b.Navigation("MarkupAgencies");

                    b.Navigation("VoidServiceAgencies");
                });

            modelBuilder.Entity("SupplierDashboard.Models.Entities.Discount", b =>
                {
                    b.Navigation("DiscountAgencies");
                });

            modelBuilder.Entity("SupplierDashboard.Models.Entities.Markup", b =>
                {
                    b.Navigation("MarkupAgencies");
                });

            modelBuilder.Entity("SupplierDashboard.Models.Entities.VoidService", b =>
                {
                    b.Navigation("VoidServiceAgencies");
                });
#pragma warning restore 612, 618
        }
    }
}
